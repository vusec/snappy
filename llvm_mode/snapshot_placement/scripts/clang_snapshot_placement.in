#!/usr/bin/env python3

import sys
import os
import subprocess
import re
from pathlib import Path

# The list of immediate args has been taken from Driver::HandleImmediateArgs
IMMEDIATE_ARGS = [
    "-dumpmachine",
    "-dumpversion",
    "--print-diagnostic-categories",
    "-help",
    "--help-hidden",
    "--version",
    "-print-resource-dir",
    "-print-search-dirs",
    "-print-file-name",
    "-print-prog-name",
    "-autocomplete",
    "-print-libgcc-file-name",
    "-print-multi-lib",
    "-print-multi-directory",
    "-print-target-triple",
    "-print-effective-triple",
    "-print-targets",
]

# The phase arguments have been taken from Driver::getFinalPhase
PREPROCESSOR_ARGS = ["-E", "-M", "-MM"]

PRECOMPILATION_ARGS = ["--precompile"]

COMPILATION_ARGS = [
    "-fsyntax-only",
    "-print-supported-cpus",
    "-module-file-info",
    "-verify-pch",
    "-rewrite-objc",
    "-rewrite-legacy-objc",
    "--migrate",
    "--analyze",
    "-emit-ast",
]

BACKEND_ARGS = ["-S"]

ASSEMBLER_ARGS = ["-c"]


def is_linking(args):
    for arg in args:
        arg_name = arg.split("=")[0]
        if (
            arg_name in IMMEDIATE_ARGS
            or arg_name in PREPROCESSOR_ARGS
            or arg_name in PRECOMPILATION_ARGS
            or arg_name in COMPILATION_ARGS
            or arg_name in BACKEND_ARGS
            or arg_name in ASSEMBLER_ARGS
        ):
            return False

    return True


SHARED_ARGS = ["-shared"]


def is_shared(args):
    for arg in args:
        if arg in SHARED_ARGS:
            return True
    return False


ABILIST_PATH = Path("@ABILIST_PATH@")
RTLIB_PATH = Path("@RTLIB_PATH@")
XRAY_NO_COMMON_PATH = Path("@XRAY_NO_COMMON_PATH@")

DFSAN_WRAPPED_SYMBOLS = "@DFSAN_RTLIB_OVERRIDE@".split(";")


def check_resource(resource_file):
    if not resource_file.is_file():
        print(f"Resource not found: {resource_file}")
        exit(1)


def check_resources():
    resources = [
        ABILIST_PATH,
        RTLIB_PATH,
        XRAY_NO_COMMON_PATH,
    ]

    for resource in resources:
        check_resource(resource)


def get_libcxx_prefix():
    try:
        libcxx_path = Path(os.environ["SNAPSHOT_PLACEMENT_LIBCXX_PREFIX"])
    except KeyError:
        print("SNAPSHOT_PLACEMENT_LIBCXX_PREFIX not set")
        exit(1)

    if not libcxx_path.is_dir():
        print(f"libc++ prefix not found: {libcxx_path}")
        exit(1)

    return libcxx_path


# The flags that match the following regular expressions should not be forwarded
ORIGINAL_FLAGS_BLACKLIST = [
    re.compile("-fsanitize=([a-z-]+,)*[a-z-]+"),  # incompatible with DFSan
]

# These flags should be injected always when compiling at the beginning of the
# compiler invocation
COMPILER_FLAGS_EARLY = [
    "-fno-sanitize-blacklist",  # early so it excludes only default blacklist
]

# These flags should be injected always when compiling
COMPILER_FLAGS = [
    "-g",  # required by rtlib
    "-fno-builtin-bcmp",  # DFSan is not compatible with `bcmp`
    "-fsanitize=dataflow",
    "-mllvm",
    "-dfsan-event-callbacks",
    f"-fsanitize-blacklist={ABILIST_PATH}",
    "-fxray-instrument",
    "-fxray-instruction-threshold=1",
]


def generate_compiler_flags():
    flags = COMPILER_FLAGS[:]
    if not "ANGORA_DONT_OPTIMIZE" in os.environ:
        flags += ["-O3", "-funroll-loops"]
    return flags


# These flags should be used always when compiling C++ code
COMPILER_CXX_FLAGS = ["-stdlib=libc++", "-nostdinc++"]


def generate_cxx_compiler_flags(libcxx_prefix):
    flags = COMPILER_CXX_FLAGS[:]

    headers_path = libcxx_prefix / "include/c++/v1"
    flags.append(f"-I{headers_path}")

    return flags


# These flags should be used always when linking
LINKER_WRAP_FLAGS = [f"--wrap={symbol}" for symbol in DFSAN_WRAPPED_SYMBOLS]
LINKER_FLAGS = [
    f"-Wl,{','.join(LINKER_WRAP_FLAGS)}",
    # -mllvm -dfsan-event-callbacks not used when linking
    "-Wno-error=unused-command-line-argument",
]

# These flags should be used when linking C++ code
LINKER_CXX_FLAGS = ["-nostdlib++"]


def generate_cxx_linker_flags(libcxx_prefix):
    flags = LINKER_CXX_FLAGS[:]

    libcxx_path = libcxx_prefix / "lib/libc++.a"
    flags.append(str(libcxx_path))
    libcxxabi_path = libcxx_prefix / "lib/libc++abi.a"
    flags.append(str(libcxxabi_path))

    return flags


# These flags should be used when linking executables, but not shared libraries
EXE_LINKER_FLAGS = [
    f"-Wl,--whole-archive,{RTLIB_PATH},--no-whole-archive",
    "-fnoxray-link-deps",
    f"-Wl,--whole-archive,{XRAY_NO_COMMON_PATH},--no-whole-archive",
    "-lpthread",
    "-lrt",
    "-lm",
    "-ldl",
]


def wrapper_main(argv):
    cpp_mode = sys.argv[0].endswith("++")

    libcxx_prefix = get_libcxx_prefix() if cpp_mode else None

    command = "clang" if not cpp_mode else "clang++"

    original_args = []
    for flag in sys.argv[1:]:
        for blacklisted_regex in ORIGINAL_FLAGS_BLACKLIST:
            if blacklisted_regex.fullmatch(flag) is None:
                original_args.append(flag)
            else:
                print(f"warning: ignored blacklisted flag: {flag}")

    cmdline = [command] + COMPILER_FLAGS_EARLY + original_args + generate_compiler_flags()
    if cpp_mode:
        cmdline += generate_cxx_compiler_flags(libcxx_prefix)

    if is_linking(original_args):
        cmdline += LINKER_FLAGS
        if cpp_mode:
            cmdline += generate_cxx_linker_flags(libcxx_prefix)

        # This check is performed in collectSanitizerRuntimes for sanitizers
        # and in tools::addXRayRuntime for XRay.
        if not is_shared(original_args):
            cmdline += EXE_LINKER_FLAGS

    try:
        subprocess.run(cmdline, check=True)
    except subprocess.CalledProcessError as ex:
        print(f"real compiler invocation: {' '.join(cmdline)}", file=sys.stderr)
        exit(ex.returncode)


def flags_main(args):
    cpp_mode = sys.argv[0].endswith("++")

    libcxx_prefix = get_libcxx_prefix() if cpp_mode else None

    if args.compiler:
        compiler_flags = COMPILER_FLAGS_EARLY + generate_compiler_flags()

        if cpp_mode:
            compiler_flags += generate_cxx_compiler_flags(libcxx_prefix)

        print(" ".join(compiler_flags))

    elif args.linker:
        linker_flags = LINKER_FLAGS
        if cpp_mode:
            linker_flags += generate_cxx_linker_flags(libcxx_prefix)

        if not args.lib:
            linker_flags += EXE_LINKER_FLAGS

        print(" ".join(linker_flags))

    else:
        raise ValueError("missing flag")


if __name__ == "__main__":
    from argparse import ArgumentParser

    check_resources()

    parser = ArgumentParser()
    flags_arg = parser.add_argument("--flags", action="store_true", required=True)

    if flags_arg.option_strings[0] in sys.argv:
        group = parser.add_mutually_exclusive_group(required=True)
        group.add_argument("--compiler", action="store_true")
        group.add_argument("--linker", action="store_true")

        parser.add_argument("--lib", action="store_true")
        args = parser.parse_args()

        flags_main(args)
    else:
        wrapper_main(sys.argv)
